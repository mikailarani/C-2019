//*********************PART5*************************
//***************************************************
//binary to decimal conversion
/*
#include <stdio.h>
int main()
{
int decimal=0, binary, base=1, rem, num;
printf("enter the binary number");
scanf("%d", &binary);
num = binary;
while(binary !=0)
{
  rem=binary %10;
  decimal = decimal +rem*base;
  binary=binary/10;
  base=base*2;
}
printf("decimal equivalent of the binary number %d is: %d", num, decimal);
    return 0;
  }
*/

//***************************************************
//calculating power of an integer
/*
#include <stdio.h>
int main()
{
int base, exponent, expo, power=1;
double power1=1.0;
printf("enter the base");
scanf("%d", &base);
printf("enter the exponent");
scanf("%d", &exponent);
expo=exponent;
if(exponent>0)
{
  while(exponent!=0)
  {
    power1=power1*base;
    exponent--;
  }
  printf("%d to the power of %d is %d", base, expo, power);
}
else 
{
  while(exponent !=0)
  {
    power1=power1*(1.0/base);
    exponent++;
  }
  printf("%d to the power of %d is %.10f", base, expo, power1);
}
}
*/

//***************************************************
//check leap year
/*
#include <stdio.h>
int main()
{
  int year;
  printf("enter the year");
  scanf("%d", &year);
  if (year % 400 ==0)
  printf("%d is a leap year", year);
  else if (year % 100==0)
  printf("%d is a leap year", year);
  else
   printf("%d is not a leap year", year);
   return 0;
}
*/

//***************************************************
//check if the number is perfect number or not!
/*
#include <stdio.h>
int main ()
{
int number;
printf("enter your number");
scanf("%d", &number);
int i, rem, sum=0;
for(i=1; i<number; i++)
{
  rem=number%i;
  if(rem==0)
  {
    sum=sum+i;
  }
}
if (sum==number)
printf("%d is a perfect number", number);
else
printf("%d is not a perfect number", number);
return 0;
}
*/

//***************************************************
//
/*
#include <stdio.h>
int areaOfRect(int length, int breadth)
{
int area;
area = length*breadth;
return area;
}
int main()
{
  int l=10, b=5;
  int area=areaOfRect(l,b);
  printf("%d\n", area);

  l=50, b=20;
  area=areaOfRect(l,b);
  printf("%d\n", area);

}
*/

//***************************************************
//Function declaration in C
/*
#include <stdio.h>
char fun();
int main()
{
  char c=fun();
  printf("character is: %c", c);
}
char fun()
{
  return 'a';
}
*/

//***************************************************
//function definition in C
/*
int add(int, int);
int main()
{
  int m=20, n=30, sum;
  sum = add(m,n);
  printf("sum is %d", sum);
}
int add (int a, int b)
{
  return (a+b);
}
*/

//***************************************************
//
/*
#include <stdio.h>
int func(int num)
{
  int count =0;
  while(num)
  {
    count++;
    num>>=1;
  }
  return(count);
}
*/
//The value returned by func(435) is

//***************************************************
//
//The output of the following C program is:
/*
void f1(int a, int b)
{
  int c;
  c=a; a=b; b=c;
}
int main()
{
  int a=4, b=5;
}
*/

//***************************************************
// for loop like for (fun(); fun(); fun()), where each of the initialization, condition, and increment sections contains the same function fun(),
/*
#include <stdio.h>
int fun() {
    static int counter = 0;
    counter++;
    printf("fun() called, counter = %d\n", counter);
    return counter < 5;  // Loop will stop when counter reaches 5
}
int main() {
    for (fun(); fun(); fun()) {
        printf("Inside loop\n");
    }
    return 0;
}
*/

//***************************************************
/*
#include <stdio.h>
void increment() {
    static int num = 16;  // `num` is initialized once and retains its value across function calls.
    num++;
    printf("%d\n", num);
}
int main() {
    increment();  // Outputs 17
    increment();  // Outputs 18
    increment();  // Outputs 19
    return 0;
}
*/

//***************************************************
//static and dynamic scoping
/*
int main()
{
  int a=10;
  a = fun1(a);
  printf("%d", a);
}
int fun1(int a)
{
  int b=5;
  b=b+a;
  return b;
}
*/

//***************************************************
//static scoping // C only follows static scoping//
/*
int a=10, b=20;
int fun()
{
  int a = 5;
  {
int c;
c = b/a;
printf("%d" ,  c);
  }
}
//answer is 4
*/

//***************************************************
//static scoping// C only follows static scoping//
/*
int fun1(int);
int fun2(int);
int a = 5;
int main()
{
  int a=10;
  a=fun1(a);
  printf("%d", a);
}
int fun1(int b)
{
  b=b+10
  b=fun2(b)
  return b;
}
int fun2(int b)
{
  int c;
  c= a+b;
  return c;
}
//answer is 25
*/

//***************************************************
//Dynamic scoping // C only follows static scoping//
/*
int fun1(int);
int fun2(int);
int a = 5;
int main()
{
  int a=10;
  a=fun1(a);
  printf("%d", a);
}
int fun1(int b)
{
  b=b+10
  b=fun2(b)
  return b;
}
int fun2(int b)
{
  int c;
  c= a+b;
  return c;
}
//answer is 30 for dynamic scoping but c follows static coping!
*/

//***************************************************
